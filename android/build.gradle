apply plugin: "com.android.application"
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.github.st1hy.sabre"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
}

configurations {
    natives
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "http://dl.bintray.com/st1hy/maven" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    final supportLibraryVersion = rootProject.ext.supportLibraryVersion
    final gdxVersion = rootProject.ext.gdxVersion
    final jUnitVersion = rootProject.ext.jUnitVersion
    final daggerVersion = rootProject.ext.daggerVersion
    final robolectricVersion = rootProject.ext.robolectricVersion
    final rxJavaVersion = rootProject.ext.rxJavaVersion
    final supportTestRunnerVersion = '0.5'
    final mockitoVersion = '1.10.19'
    final espressoVersion = '2.2.2'
    final butterknifeVersion = '8.0.0-SNAPSHOT'

    compile project(':core')
    compile project(':dao-database')
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile 'org.st1hy.android:gesture-detector:1.0.3@aar'
    compile 'com.github.rey5137:material:1.2.2'
    compile 'com.balysv:material-ripple:1.0.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile "io.reactivex:rxandroid:$rxJavaVersion"
    compile "io.reactivex:rxjava:$rxJavaVersion"

    compile "com.google.dagger:dagger:$daggerVersion"
    apt "com.google.dagger:dagger-compiler:$daggerVersion"

    compile "com.jakewharton:butterknife:$butterknifeVersion"
    apt "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    androidTestCompile "com.android.support:support-annotations:$supportLibraryVersion"
    androidTestCompile "com.android.support.test:runner:$supportTestRunnerVersion"
    androidTestCompile "com.android.support.test:rules:$supportTestRunnerVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
    }
    androidTestCompile "org.mockito:mockito-core:$mockitoVersion"
    androidTestCompile "junit:junit:$jUnitVersion"

    androidTestApt "com.google.dagger:dagger-compiler:$daggerVersion"

    testCompile "org.robolectric:robolectric:$robolectricVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "junit:junit:$jUnitVersion"

    testApt "com.google.dagger:dagger-compiler:$daggerVersion"

    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}